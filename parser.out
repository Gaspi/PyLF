Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSERT
    ASSERTNOT
    CHECK
    CHECKNOT
    DEF
    EQUAL
    FATARROW
    GDT
    INFER
    KW_INJ
    KW_THM
    LEFTBRA
    PRINT
    REQUIRE
    RIGHTBRA
    UNDERSCORE

Grammar

Rule 0     S' -> signature
Rule 1     signature -> modules
Rule 2     empty -> <empty>
Rule 3     modules -> module modules
Rule 4     modules -> empty
Rule 5     module -> NAME IDENT DOT entries
Rule 6     entries -> entry entries
Rule 7     entries -> empty
Rule 8     entry -> symbol_decl
Rule 9     entry -> rule_decl
Rule 10    entry -> command
Rule 11    params -> param params
Rule 12    params -> empty
Rule 13    param -> LEFTPAR IDENT COLON expression RIGHTPAR
Rule 14    priv -> KW_PRV
Rule 15    priv -> <empty>
Rule 16    symbol_decl -> priv IDENT params COLON expression DOT
Rule 17    symbol_decl -> priv KW_DEF IDENT params COLON expression DOT
Rule 18    symbol_decl -> priv KW_DEFAC IDENT LEFTSQU expression RIGHTSQU DOT
Rule 19    qualid -> IDENT
Rule 20    qualid -> IDENT DOT IDENT
Rule 21    idents -> IDENT idents
Rule 22    idents -> empty
Rule 23    rule_decl -> LEFTSQU idents RIGHTSQU expression LONGARROW expression DOT
Rule 24    command -> EVAL IDENT DOT
Rule 25    expression -> TYPE
Rule 26    expression -> bindannot ARROW expression
Rule 27    expression -> LEFTPAR expression expression RIGHTPAR
Rule 28    expression -> bindanon ARROW expression
Rule 29    bindannot -> LEFTPAR IDENT COLON expression RIGHTPAR
Rule 30    bindanon -> IDENT
Rule 31    expression -> qualid
Rule 32    expression -> LEFTPAR expression RIGHTPAR

Terminals, with rules where they appear

ARROW                : 26 28
ASSERT               : 
ASSERTNOT            : 
CHECK                : 
CHECKNOT             : 
COLON                : 13 16 17 29
DEF                  : 
DOT                  : 5 16 17 18 20 23 24
EQUAL                : 
EVAL                 : 24
FATARROW             : 
GDT                  : 
IDENT                : 5 13 16 17 18 19 20 20 21 24 29 30
INFER                : 
KW_DEF               : 17
KW_DEFAC             : 18
KW_INJ               : 
KW_PRV               : 14
KW_THM               : 
LEFTBRA              : 
LEFTPAR              : 13 27 29 32
LEFTSQU              : 18 23
LONGARROW            : 23
NAME                 : 5
PRINT                : 
REQUIRE              : 
RIGHTBRA             : 
RIGHTPAR             : 13 27 29 32
RIGHTSQU             : 18 23
TYPE                 : 25
UNDERSCORE           : 
error                : 

Nonterminals, with rules where they appear

bindannot            : 26
bindanon             : 28
command              : 10
empty                : 4 7 12 22
entries              : 5 6
entry                : 6
expression           : 13 16 17 18 23 23 26 27 27 28 29 32
idents               : 21 23
module               : 3
modules              : 1 3
param                : 11
params               : 11 16 17
priv                 : 16 17 18
qualid               : 31
rule_decl            : 9
signature            : 0
symbol_decl          : 8

Parsing method: LALR

state 0

    (0) S' -> . signature
    (1) signature -> . modules
    (3) modules -> . module modules
    (4) modules -> . empty
    (5) module -> . NAME IDENT DOT entries
    (2) empty -> .

    NAME            shift and go to state 5
    $end            reduce using rule 2 (empty -> .)

    signature                      shift and go to state 1
    modules                        shift and go to state 2
    module                         shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> signature .



state 2

    (1) signature -> modules .

    $end            reduce using rule 1 (signature -> modules .)


state 3

    (3) modules -> module . modules
    (3) modules -> . module modules
    (4) modules -> . empty
    (5) module -> . NAME IDENT DOT entries
    (2) empty -> .

    NAME            shift and go to state 5
    $end            reduce using rule 2 (empty -> .)

    module                         shift and go to state 3
    modules                        shift and go to state 6
    empty                          shift and go to state 4

state 4

    (4) modules -> empty .

    $end            reduce using rule 4 (modules -> empty .)


state 5

    (5) module -> NAME . IDENT DOT entries

    IDENT           shift and go to state 7


state 6

    (3) modules -> module modules .

    $end            reduce using rule 3 (modules -> module modules .)


state 7

    (5) module -> NAME IDENT . DOT entries

    DOT             shift and go to state 8


state 8

    (5) module -> NAME IDENT DOT . entries
    (6) entries -> . entry entries
    (7) entries -> . empty
    (8) entry -> . symbol_decl
    (9) entry -> . rule_decl
    (10) entry -> . command
    (2) empty -> .
    (16) symbol_decl -> . priv IDENT params COLON expression DOT
    (17) symbol_decl -> . priv KW_DEF IDENT params COLON expression DOT
    (18) symbol_decl -> . priv KW_DEFAC IDENT LEFTSQU expression RIGHTSQU DOT
    (23) rule_decl -> . LEFTSQU idents RIGHTSQU expression LONGARROW expression DOT
    (24) command -> . EVAL IDENT DOT
    (14) priv -> . KW_PRV
    (15) priv -> .

    NAME            reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    LEFTSQU         shift and go to state 16
    EVAL            shift and go to state 17
    KW_PRV          shift and go to state 18
    IDENT           reduce using rule 15 (priv -> .)
    KW_DEF          reduce using rule 15 (priv -> .)
    KW_DEFAC        reduce using rule 15 (priv -> .)

    entries                        shift and go to state 9
    entry                          shift and go to state 10
    empty                          shift and go to state 11
    symbol_decl                    shift and go to state 12
    rule_decl                      shift and go to state 13
    command                        shift and go to state 14
    priv                           shift and go to state 15

state 9

    (5) module -> NAME IDENT DOT entries .

    NAME            reduce using rule 5 (module -> NAME IDENT DOT entries .)
    $end            reduce using rule 5 (module -> NAME IDENT DOT entries .)


state 10

    (6) entries -> entry . entries
    (6) entries -> . entry entries
    (7) entries -> . empty
    (8) entry -> . symbol_decl
    (9) entry -> . rule_decl
    (10) entry -> . command
    (2) empty -> .
    (16) symbol_decl -> . priv IDENT params COLON expression DOT
    (17) symbol_decl -> . priv KW_DEF IDENT params COLON expression DOT
    (18) symbol_decl -> . priv KW_DEFAC IDENT LEFTSQU expression RIGHTSQU DOT
    (23) rule_decl -> . LEFTSQU idents RIGHTSQU expression LONGARROW expression DOT
    (24) command -> . EVAL IDENT DOT
    (14) priv -> . KW_PRV
    (15) priv -> .

    NAME            reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    LEFTSQU         shift and go to state 16
    EVAL            shift and go to state 17
    KW_PRV          shift and go to state 18
    IDENT           reduce using rule 15 (priv -> .)
    KW_DEF          reduce using rule 15 (priv -> .)
    KW_DEFAC        reduce using rule 15 (priv -> .)

    entry                          shift and go to state 10
    entries                        shift and go to state 19
    empty                          shift and go to state 11
    symbol_decl                    shift and go to state 12
    rule_decl                      shift and go to state 13
    command                        shift and go to state 14
    priv                           shift and go to state 15

state 11

    (7) entries -> empty .

    NAME            reduce using rule 7 (entries -> empty .)
    $end            reduce using rule 7 (entries -> empty .)


state 12

    (8) entry -> symbol_decl .

    LEFTSQU         reduce using rule 8 (entry -> symbol_decl .)
    EVAL            reduce using rule 8 (entry -> symbol_decl .)
    KW_PRV          reduce using rule 8 (entry -> symbol_decl .)
    IDENT           reduce using rule 8 (entry -> symbol_decl .)
    KW_DEF          reduce using rule 8 (entry -> symbol_decl .)
    KW_DEFAC        reduce using rule 8 (entry -> symbol_decl .)
    NAME            reduce using rule 8 (entry -> symbol_decl .)
    $end            reduce using rule 8 (entry -> symbol_decl .)


state 13

    (9) entry -> rule_decl .

    LEFTSQU         reduce using rule 9 (entry -> rule_decl .)
    EVAL            reduce using rule 9 (entry -> rule_decl .)
    KW_PRV          reduce using rule 9 (entry -> rule_decl .)
    IDENT           reduce using rule 9 (entry -> rule_decl .)
    KW_DEF          reduce using rule 9 (entry -> rule_decl .)
    KW_DEFAC        reduce using rule 9 (entry -> rule_decl .)
    NAME            reduce using rule 9 (entry -> rule_decl .)
    $end            reduce using rule 9 (entry -> rule_decl .)


state 14

    (10) entry -> command .

    LEFTSQU         reduce using rule 10 (entry -> command .)
    EVAL            reduce using rule 10 (entry -> command .)
    KW_PRV          reduce using rule 10 (entry -> command .)
    IDENT           reduce using rule 10 (entry -> command .)
    KW_DEF          reduce using rule 10 (entry -> command .)
    KW_DEFAC        reduce using rule 10 (entry -> command .)
    NAME            reduce using rule 10 (entry -> command .)
    $end            reduce using rule 10 (entry -> command .)


state 15

    (16) symbol_decl -> priv . IDENT params COLON expression DOT
    (17) symbol_decl -> priv . KW_DEF IDENT params COLON expression DOT
    (18) symbol_decl -> priv . KW_DEFAC IDENT LEFTSQU expression RIGHTSQU DOT

    IDENT           shift and go to state 20
    KW_DEF          shift and go to state 21
    KW_DEFAC        shift and go to state 22


state 16

    (23) rule_decl -> LEFTSQU . idents RIGHTSQU expression LONGARROW expression DOT
    (21) idents -> . IDENT idents
    (22) idents -> . empty
    (2) empty -> .

    IDENT           shift and go to state 24
    RIGHTSQU        reduce using rule 2 (empty -> .)

    idents                         shift and go to state 23
    empty                          shift and go to state 25

state 17

    (24) command -> EVAL . IDENT DOT

    IDENT           shift and go to state 26


state 18

    (14) priv -> KW_PRV .

    IDENT           reduce using rule 14 (priv -> KW_PRV .)
    KW_DEF          reduce using rule 14 (priv -> KW_PRV .)
    KW_DEFAC        reduce using rule 14 (priv -> KW_PRV .)


state 19

    (6) entries -> entry entries .

    NAME            reduce using rule 6 (entries -> entry entries .)
    $end            reduce using rule 6 (entries -> entry entries .)


state 20

    (16) symbol_decl -> priv IDENT . params COLON expression DOT
    (11) params -> . param params
    (12) params -> . empty
    (13) param -> . LEFTPAR IDENT COLON expression RIGHTPAR
    (2) empty -> .

    LEFTPAR         shift and go to state 30
    COLON           reduce using rule 2 (empty -> .)

    params                         shift and go to state 27
    param                          shift and go to state 28
    empty                          shift and go to state 29

state 21

    (17) symbol_decl -> priv KW_DEF . IDENT params COLON expression DOT

    IDENT           shift and go to state 31


state 22

    (18) symbol_decl -> priv KW_DEFAC . IDENT LEFTSQU expression RIGHTSQU DOT

    IDENT           shift and go to state 32


state 23

    (23) rule_decl -> LEFTSQU idents . RIGHTSQU expression LONGARROW expression DOT

    RIGHTSQU        shift and go to state 33


state 24

    (21) idents -> IDENT . idents
    (21) idents -> . IDENT idents
    (22) idents -> . empty
    (2) empty -> .

    IDENT           shift and go to state 24
    RIGHTSQU        reduce using rule 2 (empty -> .)

    idents                         shift and go to state 34
    empty                          shift and go to state 25

state 25

    (22) idents -> empty .

    RIGHTSQU        reduce using rule 22 (idents -> empty .)


state 26

    (24) command -> EVAL IDENT . DOT

    DOT             shift and go to state 35


state 27

    (16) symbol_decl -> priv IDENT params . COLON expression DOT

    COLON           shift and go to state 36


state 28

    (11) params -> param . params
    (11) params -> . param params
    (12) params -> . empty
    (13) param -> . LEFTPAR IDENT COLON expression RIGHTPAR
    (2) empty -> .

    LEFTPAR         shift and go to state 30
    COLON           reduce using rule 2 (empty -> .)

    param                          shift and go to state 28
    params                         shift and go to state 37
    empty                          shift and go to state 29

state 29

    (12) params -> empty .

    COLON           reduce using rule 12 (params -> empty .)


state 30

    (13) param -> LEFTPAR . IDENT COLON expression RIGHTPAR

    IDENT           shift and go to state 38


state 31

    (17) symbol_decl -> priv KW_DEF IDENT . params COLON expression DOT
    (11) params -> . param params
    (12) params -> . empty
    (13) param -> . LEFTPAR IDENT COLON expression RIGHTPAR
    (2) empty -> .

    LEFTPAR         shift and go to state 30
    COLON           reduce using rule 2 (empty -> .)

    params                         shift and go to state 39
    param                          shift and go to state 28
    empty                          shift and go to state 29

state 32

    (18) symbol_decl -> priv KW_DEFAC IDENT . LEFTSQU expression RIGHTSQU DOT

    LEFTSQU         shift and go to state 40


state 33

    (23) rule_decl -> LEFTSQU idents RIGHTSQU . expression LONGARROW expression DOT
    (25) expression -> . TYPE
    (26) expression -> . bindannot ARROW expression
    (27) expression -> . LEFTPAR expression expression RIGHTPAR
    (28) expression -> . bindanon ARROW expression
    (31) expression -> . qualid
    (32) expression -> . LEFTPAR expression RIGHTPAR
    (29) bindannot -> . LEFTPAR IDENT COLON expression RIGHTPAR
    (30) bindanon -> . IDENT
    (19) qualid -> . IDENT
    (20) qualid -> . IDENT DOT IDENT

    TYPE            shift and go to state 42
    LEFTPAR         shift and go to state 44
    IDENT           shift and go to state 47

    expression                     shift and go to state 41
    bindannot                      shift and go to state 43
    bindanon                       shift and go to state 45
    qualid                         shift and go to state 46

state 34

    (21) idents -> IDENT idents .

    RIGHTSQU        reduce using rule 21 (idents -> IDENT idents .)


state 35

    (24) command -> EVAL IDENT DOT .

    LEFTSQU         reduce using rule 24 (command -> EVAL IDENT DOT .)
    EVAL            reduce using rule 24 (command -> EVAL IDENT DOT .)
    KW_PRV          reduce using rule 24 (command -> EVAL IDENT DOT .)
    IDENT           reduce using rule 24 (command -> EVAL IDENT DOT .)
    KW_DEF          reduce using rule 24 (command -> EVAL IDENT DOT .)
    KW_DEFAC        reduce using rule 24 (command -> EVAL IDENT DOT .)
    NAME            reduce using rule 24 (command -> EVAL IDENT DOT .)
    $end            reduce using rule 24 (command -> EVAL IDENT DOT .)


state 36

    (16) symbol_decl -> priv IDENT params COLON . expression DOT
    (25) expression -> . TYPE
    (26) expression -> . bindannot ARROW expression
    (27) expression -> . LEFTPAR expression expression RIGHTPAR
    (28) expression -> . bindanon ARROW expression
    (31) expression -> . qualid
    (32) expression -> . LEFTPAR expression RIGHTPAR
    (29) bindannot -> . LEFTPAR IDENT COLON expression RIGHTPAR
    (30) bindanon -> . IDENT
    (19) qualid -> . IDENT
    (20) qualid -> . IDENT DOT IDENT

    TYPE            shift and go to state 42
    LEFTPAR         shift and go to state 44
    IDENT           shift and go to state 47

    expression                     shift and go to state 48
    bindannot                      shift and go to state 43
    bindanon                       shift and go to state 45
    qualid                         shift and go to state 46

state 37

    (11) params -> param params .

    COLON           reduce using rule 11 (params -> param params .)


state 38

    (13) param -> LEFTPAR IDENT . COLON expression RIGHTPAR

    COLON           shift and go to state 49


state 39

    (17) symbol_decl -> priv KW_DEF IDENT params . COLON expression DOT

    COLON           shift and go to state 50


state 40

    (18) symbol_decl -> priv KW_DEFAC IDENT LEFTSQU . expression RIGHTSQU DOT
    (25) expression -> . TYPE
    (26) expression -> . bindannot ARROW expression
    (27) expression -> . LEFTPAR expression expression RIGHTPAR
    (28) expression -> . bindanon ARROW expression
    (31) expression -> . qualid
    (32) expression -> . LEFTPAR expression RIGHTPAR
    (29) bindannot -> . LEFTPAR IDENT COLON expression RIGHTPAR
    (30) bindanon -> . IDENT
    (19) qualid -> . IDENT
    (20) qualid -> . IDENT DOT IDENT

    TYPE            shift and go to state 42
    LEFTPAR         shift and go to state 44
    IDENT           shift and go to state 47

    expression                     shift and go to state 51
    bindannot                      shift and go to state 43
    bindanon                       shift and go to state 45
    qualid                         shift and go to state 46

state 41

    (23) rule_decl -> LEFTSQU idents RIGHTSQU expression . LONGARROW expression DOT

    LONGARROW       shift and go to state 52


state 42

    (25) expression -> TYPE .

    LONGARROW       reduce using rule 25 (expression -> TYPE .)
    DOT             reduce using rule 25 (expression -> TYPE .)
    RIGHTSQU        reduce using rule 25 (expression -> TYPE .)
    RIGHTPAR        reduce using rule 25 (expression -> TYPE .)
    TYPE            reduce using rule 25 (expression -> TYPE .)
    LEFTPAR         reduce using rule 25 (expression -> TYPE .)
    IDENT           reduce using rule 25 (expression -> TYPE .)


state 43

    (26) expression -> bindannot . ARROW expression

    ARROW           shift and go to state 53


state 44

    (27) expression -> LEFTPAR . expression expression RIGHTPAR
    (32) expression -> LEFTPAR . expression RIGHTPAR
    (29) bindannot -> LEFTPAR . IDENT COLON expression RIGHTPAR
    (25) expression -> . TYPE
    (26) expression -> . bindannot ARROW expression
    (27) expression -> . LEFTPAR expression expression RIGHTPAR
    (28) expression -> . bindanon ARROW expression
    (31) expression -> . qualid
    (32) expression -> . LEFTPAR expression RIGHTPAR
    (29) bindannot -> . LEFTPAR IDENT COLON expression RIGHTPAR
    (30) bindanon -> . IDENT
    (19) qualid -> . IDENT
    (20) qualid -> . IDENT DOT IDENT

    IDENT           shift and go to state 55
    TYPE            shift and go to state 42
    LEFTPAR         shift and go to state 44

    expression                     shift and go to state 54
    bindannot                      shift and go to state 43
    bindanon                       shift and go to state 45
    qualid                         shift and go to state 46

state 45

    (28) expression -> bindanon . ARROW expression

    ARROW           shift and go to state 56


state 46

    (31) expression -> qualid .

    LONGARROW       reduce using rule 31 (expression -> qualid .)
    DOT             reduce using rule 31 (expression -> qualid .)
    RIGHTSQU        reduce using rule 31 (expression -> qualid .)
    RIGHTPAR        reduce using rule 31 (expression -> qualid .)
    TYPE            reduce using rule 31 (expression -> qualid .)
    LEFTPAR         reduce using rule 31 (expression -> qualid .)
    IDENT           reduce using rule 31 (expression -> qualid .)


state 47

    (30) bindanon -> IDENT .
    (19) qualid -> IDENT .
    (20) qualid -> IDENT . DOT IDENT

  ! shift/reduce conflict for DOT resolved as shift
    ARROW           reduce using rule 30 (bindanon -> IDENT .)
    LONGARROW       reduce using rule 19 (qualid -> IDENT .)
    RIGHTSQU        reduce using rule 19 (qualid -> IDENT .)
    RIGHTPAR        reduce using rule 19 (qualid -> IDENT .)
    TYPE            reduce using rule 19 (qualid -> IDENT .)
    LEFTPAR         reduce using rule 19 (qualid -> IDENT .)
    IDENT           reduce using rule 19 (qualid -> IDENT .)
    DOT             shift and go to state 57

  ! DOT             [ reduce using rule 19 (qualid -> IDENT .) ]


state 48

    (16) symbol_decl -> priv IDENT params COLON expression . DOT

    DOT             shift and go to state 58


state 49

    (13) param -> LEFTPAR IDENT COLON . expression RIGHTPAR
    (25) expression -> . TYPE
    (26) expression -> . bindannot ARROW expression
    (27) expression -> . LEFTPAR expression expression RIGHTPAR
    (28) expression -> . bindanon ARROW expression
    (31) expression -> . qualid
    (32) expression -> . LEFTPAR expression RIGHTPAR
    (29) bindannot -> . LEFTPAR IDENT COLON expression RIGHTPAR
    (30) bindanon -> . IDENT
    (19) qualid -> . IDENT
    (20) qualid -> . IDENT DOT IDENT

    TYPE            shift and go to state 42
    LEFTPAR         shift and go to state 44
    IDENT           shift and go to state 47

    expression                     shift and go to state 59
    bindannot                      shift and go to state 43
    bindanon                       shift and go to state 45
    qualid                         shift and go to state 46

state 50

    (17) symbol_decl -> priv KW_DEF IDENT params COLON . expression DOT
    (25) expression -> . TYPE
    (26) expression -> . bindannot ARROW expression
    (27) expression -> . LEFTPAR expression expression RIGHTPAR
    (28) expression -> . bindanon ARROW expression
    (31) expression -> . qualid
    (32) expression -> . LEFTPAR expression RIGHTPAR
    (29) bindannot -> . LEFTPAR IDENT COLON expression RIGHTPAR
    (30) bindanon -> . IDENT
    (19) qualid -> . IDENT
    (20) qualid -> . IDENT DOT IDENT

    TYPE            shift and go to state 42
    LEFTPAR         shift and go to state 44
    IDENT           shift and go to state 47

    expression                     shift and go to state 60
    bindannot                      shift and go to state 43
    bindanon                       shift and go to state 45
    qualid                         shift and go to state 46

state 51

    (18) symbol_decl -> priv KW_DEFAC IDENT LEFTSQU expression . RIGHTSQU DOT

    RIGHTSQU        shift and go to state 61


state 52

    (23) rule_decl -> LEFTSQU idents RIGHTSQU expression LONGARROW . expression DOT
    (25) expression -> . TYPE
    (26) expression -> . bindannot ARROW expression
    (27) expression -> . LEFTPAR expression expression RIGHTPAR
    (28) expression -> . bindanon ARROW expression
    (31) expression -> . qualid
    (32) expression -> . LEFTPAR expression RIGHTPAR
    (29) bindannot -> . LEFTPAR IDENT COLON expression RIGHTPAR
    (30) bindanon -> . IDENT
    (19) qualid -> . IDENT
    (20) qualid -> . IDENT DOT IDENT

    TYPE            shift and go to state 42
    LEFTPAR         shift and go to state 44
    IDENT           shift and go to state 47

    expression                     shift and go to state 62
    bindannot                      shift and go to state 43
    bindanon                       shift and go to state 45
    qualid                         shift and go to state 46

state 53

    (26) expression -> bindannot ARROW . expression
    (25) expression -> . TYPE
    (26) expression -> . bindannot ARROW expression
    (27) expression -> . LEFTPAR expression expression RIGHTPAR
    (28) expression -> . bindanon ARROW expression
    (31) expression -> . qualid
    (32) expression -> . LEFTPAR expression RIGHTPAR
    (29) bindannot -> . LEFTPAR IDENT COLON expression RIGHTPAR
    (30) bindanon -> . IDENT
    (19) qualid -> . IDENT
    (20) qualid -> . IDENT DOT IDENT

    TYPE            shift and go to state 42
    LEFTPAR         shift and go to state 44
    IDENT           shift and go to state 47

    bindannot                      shift and go to state 43
    expression                     shift and go to state 63
    bindanon                       shift and go to state 45
    qualid                         shift and go to state 46

state 54

    (27) expression -> LEFTPAR expression . expression RIGHTPAR
    (32) expression -> LEFTPAR expression . RIGHTPAR
    (25) expression -> . TYPE
    (26) expression -> . bindannot ARROW expression
    (27) expression -> . LEFTPAR expression expression RIGHTPAR
    (28) expression -> . bindanon ARROW expression
    (31) expression -> . qualid
    (32) expression -> . LEFTPAR expression RIGHTPAR
    (29) bindannot -> . LEFTPAR IDENT COLON expression RIGHTPAR
    (30) bindanon -> . IDENT
    (19) qualid -> . IDENT
    (20) qualid -> . IDENT DOT IDENT

    RIGHTPAR        shift and go to state 65
    TYPE            shift and go to state 42
    LEFTPAR         shift and go to state 44
    IDENT           shift and go to state 47

    expression                     shift and go to state 64
    bindannot                      shift and go to state 43
    bindanon                       shift and go to state 45
    qualid                         shift and go to state 46

state 55

    (29) bindannot -> LEFTPAR IDENT . COLON expression RIGHTPAR
    (30) bindanon -> IDENT .
    (19) qualid -> IDENT .
    (20) qualid -> IDENT . DOT IDENT

    COLON           shift and go to state 66
    ARROW           reduce using rule 30 (bindanon -> IDENT .)
    RIGHTPAR        reduce using rule 19 (qualid -> IDENT .)
    TYPE            reduce using rule 19 (qualid -> IDENT .)
    LEFTPAR         reduce using rule 19 (qualid -> IDENT .)
    IDENT           reduce using rule 19 (qualid -> IDENT .)
    DOT             shift and go to state 57


state 56

    (28) expression -> bindanon ARROW . expression
    (25) expression -> . TYPE
    (26) expression -> . bindannot ARROW expression
    (27) expression -> . LEFTPAR expression expression RIGHTPAR
    (28) expression -> . bindanon ARROW expression
    (31) expression -> . qualid
    (32) expression -> . LEFTPAR expression RIGHTPAR
    (29) bindannot -> . LEFTPAR IDENT COLON expression RIGHTPAR
    (30) bindanon -> . IDENT
    (19) qualid -> . IDENT
    (20) qualid -> . IDENT DOT IDENT

    TYPE            shift and go to state 42
    LEFTPAR         shift and go to state 44
    IDENT           shift and go to state 47

    bindanon                       shift and go to state 45
    expression                     shift and go to state 67
    bindannot                      shift and go to state 43
    qualid                         shift and go to state 46

state 57

    (20) qualid -> IDENT DOT . IDENT

    IDENT           shift and go to state 68


state 58

    (16) symbol_decl -> priv IDENT params COLON expression DOT .

    LEFTSQU         reduce using rule 16 (symbol_decl -> priv IDENT params COLON expression DOT .)
    EVAL            reduce using rule 16 (symbol_decl -> priv IDENT params COLON expression DOT .)
    KW_PRV          reduce using rule 16 (symbol_decl -> priv IDENT params COLON expression DOT .)
    IDENT           reduce using rule 16 (symbol_decl -> priv IDENT params COLON expression DOT .)
    KW_DEF          reduce using rule 16 (symbol_decl -> priv IDENT params COLON expression DOT .)
    KW_DEFAC        reduce using rule 16 (symbol_decl -> priv IDENT params COLON expression DOT .)
    NAME            reduce using rule 16 (symbol_decl -> priv IDENT params COLON expression DOT .)
    $end            reduce using rule 16 (symbol_decl -> priv IDENT params COLON expression DOT .)


state 59

    (13) param -> LEFTPAR IDENT COLON expression . RIGHTPAR

    RIGHTPAR        shift and go to state 69


state 60

    (17) symbol_decl -> priv KW_DEF IDENT params COLON expression . DOT

    DOT             shift and go to state 70


state 61

    (18) symbol_decl -> priv KW_DEFAC IDENT LEFTSQU expression RIGHTSQU . DOT

    DOT             shift and go to state 71


state 62

    (23) rule_decl -> LEFTSQU idents RIGHTSQU expression LONGARROW expression . DOT

    DOT             shift and go to state 72


state 63

    (26) expression -> bindannot ARROW expression .

    LONGARROW       reduce using rule 26 (expression -> bindannot ARROW expression .)
    DOT             reduce using rule 26 (expression -> bindannot ARROW expression .)
    RIGHTSQU        reduce using rule 26 (expression -> bindannot ARROW expression .)
    RIGHTPAR        reduce using rule 26 (expression -> bindannot ARROW expression .)
    TYPE            reduce using rule 26 (expression -> bindannot ARROW expression .)
    LEFTPAR         reduce using rule 26 (expression -> bindannot ARROW expression .)
    IDENT           reduce using rule 26 (expression -> bindannot ARROW expression .)


state 64

    (27) expression -> LEFTPAR expression expression . RIGHTPAR

    RIGHTPAR        shift and go to state 73


state 65

    (32) expression -> LEFTPAR expression RIGHTPAR .

    LONGARROW       reduce using rule 32 (expression -> LEFTPAR expression RIGHTPAR .)
    DOT             reduce using rule 32 (expression -> LEFTPAR expression RIGHTPAR .)
    RIGHTSQU        reduce using rule 32 (expression -> LEFTPAR expression RIGHTPAR .)
    RIGHTPAR        reduce using rule 32 (expression -> LEFTPAR expression RIGHTPAR .)
    TYPE            reduce using rule 32 (expression -> LEFTPAR expression RIGHTPAR .)
    LEFTPAR         reduce using rule 32 (expression -> LEFTPAR expression RIGHTPAR .)
    IDENT           reduce using rule 32 (expression -> LEFTPAR expression RIGHTPAR .)


state 66

    (29) bindannot -> LEFTPAR IDENT COLON . expression RIGHTPAR
    (25) expression -> . TYPE
    (26) expression -> . bindannot ARROW expression
    (27) expression -> . LEFTPAR expression expression RIGHTPAR
    (28) expression -> . bindanon ARROW expression
    (31) expression -> . qualid
    (32) expression -> . LEFTPAR expression RIGHTPAR
    (29) bindannot -> . LEFTPAR IDENT COLON expression RIGHTPAR
    (30) bindanon -> . IDENT
    (19) qualid -> . IDENT
    (20) qualid -> . IDENT DOT IDENT

    TYPE            shift and go to state 42
    LEFTPAR         shift and go to state 44
    IDENT           shift and go to state 47

    expression                     shift and go to state 74
    bindannot                      shift and go to state 43
    bindanon                       shift and go to state 45
    qualid                         shift and go to state 46

state 67

    (28) expression -> bindanon ARROW expression .

    LONGARROW       reduce using rule 28 (expression -> bindanon ARROW expression .)
    DOT             reduce using rule 28 (expression -> bindanon ARROW expression .)
    RIGHTSQU        reduce using rule 28 (expression -> bindanon ARROW expression .)
    RIGHTPAR        reduce using rule 28 (expression -> bindanon ARROW expression .)
    TYPE            reduce using rule 28 (expression -> bindanon ARROW expression .)
    LEFTPAR         reduce using rule 28 (expression -> bindanon ARROW expression .)
    IDENT           reduce using rule 28 (expression -> bindanon ARROW expression .)


state 68

    (20) qualid -> IDENT DOT IDENT .

    LONGARROW       reduce using rule 20 (qualid -> IDENT DOT IDENT .)
    DOT             reduce using rule 20 (qualid -> IDENT DOT IDENT .)
    RIGHTSQU        reduce using rule 20 (qualid -> IDENT DOT IDENT .)
    RIGHTPAR        reduce using rule 20 (qualid -> IDENT DOT IDENT .)
    TYPE            reduce using rule 20 (qualid -> IDENT DOT IDENT .)
    LEFTPAR         reduce using rule 20 (qualid -> IDENT DOT IDENT .)
    IDENT           reduce using rule 20 (qualid -> IDENT DOT IDENT .)


state 69

    (13) param -> LEFTPAR IDENT COLON expression RIGHTPAR .

    LEFTPAR         reduce using rule 13 (param -> LEFTPAR IDENT COLON expression RIGHTPAR .)
    COLON           reduce using rule 13 (param -> LEFTPAR IDENT COLON expression RIGHTPAR .)


state 70

    (17) symbol_decl -> priv KW_DEF IDENT params COLON expression DOT .

    LEFTSQU         reduce using rule 17 (symbol_decl -> priv KW_DEF IDENT params COLON expression DOT .)
    EVAL            reduce using rule 17 (symbol_decl -> priv KW_DEF IDENT params COLON expression DOT .)
    KW_PRV          reduce using rule 17 (symbol_decl -> priv KW_DEF IDENT params COLON expression DOT .)
    IDENT           reduce using rule 17 (symbol_decl -> priv KW_DEF IDENT params COLON expression DOT .)
    KW_DEF          reduce using rule 17 (symbol_decl -> priv KW_DEF IDENT params COLON expression DOT .)
    KW_DEFAC        reduce using rule 17 (symbol_decl -> priv KW_DEF IDENT params COLON expression DOT .)
    NAME            reduce using rule 17 (symbol_decl -> priv KW_DEF IDENT params COLON expression DOT .)
    $end            reduce using rule 17 (symbol_decl -> priv KW_DEF IDENT params COLON expression DOT .)


state 71

    (18) symbol_decl -> priv KW_DEFAC IDENT LEFTSQU expression RIGHTSQU DOT .

    LEFTSQU         reduce using rule 18 (symbol_decl -> priv KW_DEFAC IDENT LEFTSQU expression RIGHTSQU DOT .)
    EVAL            reduce using rule 18 (symbol_decl -> priv KW_DEFAC IDENT LEFTSQU expression RIGHTSQU DOT .)
    KW_PRV          reduce using rule 18 (symbol_decl -> priv KW_DEFAC IDENT LEFTSQU expression RIGHTSQU DOT .)
    IDENT           reduce using rule 18 (symbol_decl -> priv KW_DEFAC IDENT LEFTSQU expression RIGHTSQU DOT .)
    KW_DEF          reduce using rule 18 (symbol_decl -> priv KW_DEFAC IDENT LEFTSQU expression RIGHTSQU DOT .)
    KW_DEFAC        reduce using rule 18 (symbol_decl -> priv KW_DEFAC IDENT LEFTSQU expression RIGHTSQU DOT .)
    NAME            reduce using rule 18 (symbol_decl -> priv KW_DEFAC IDENT LEFTSQU expression RIGHTSQU DOT .)
    $end            reduce using rule 18 (symbol_decl -> priv KW_DEFAC IDENT LEFTSQU expression RIGHTSQU DOT .)


state 72

    (23) rule_decl -> LEFTSQU idents RIGHTSQU expression LONGARROW expression DOT .

    LEFTSQU         reduce using rule 23 (rule_decl -> LEFTSQU idents RIGHTSQU expression LONGARROW expression DOT .)
    EVAL            reduce using rule 23 (rule_decl -> LEFTSQU idents RIGHTSQU expression LONGARROW expression DOT .)
    KW_PRV          reduce using rule 23 (rule_decl -> LEFTSQU idents RIGHTSQU expression LONGARROW expression DOT .)
    IDENT           reduce using rule 23 (rule_decl -> LEFTSQU idents RIGHTSQU expression LONGARROW expression DOT .)
    KW_DEF          reduce using rule 23 (rule_decl -> LEFTSQU idents RIGHTSQU expression LONGARROW expression DOT .)
    KW_DEFAC        reduce using rule 23 (rule_decl -> LEFTSQU idents RIGHTSQU expression LONGARROW expression DOT .)
    NAME            reduce using rule 23 (rule_decl -> LEFTSQU idents RIGHTSQU expression LONGARROW expression DOT .)
    $end            reduce using rule 23 (rule_decl -> LEFTSQU idents RIGHTSQU expression LONGARROW expression DOT .)


state 73

    (27) expression -> LEFTPAR expression expression RIGHTPAR .

    LONGARROW       reduce using rule 27 (expression -> LEFTPAR expression expression RIGHTPAR .)
    DOT             reduce using rule 27 (expression -> LEFTPAR expression expression RIGHTPAR .)
    RIGHTSQU        reduce using rule 27 (expression -> LEFTPAR expression expression RIGHTPAR .)
    RIGHTPAR        reduce using rule 27 (expression -> LEFTPAR expression expression RIGHTPAR .)
    TYPE            reduce using rule 27 (expression -> LEFTPAR expression expression RIGHTPAR .)
    LEFTPAR         reduce using rule 27 (expression -> LEFTPAR expression expression RIGHTPAR .)
    IDENT           reduce using rule 27 (expression -> LEFTPAR expression expression RIGHTPAR .)


state 74

    (29) bindannot -> LEFTPAR IDENT COLON expression . RIGHTPAR

    RIGHTPAR        shift and go to state 75


state 75

    (29) bindannot -> LEFTPAR IDENT COLON expression RIGHTPAR .

    ARROW           reduce using rule 29 (bindannot -> LEFTPAR IDENT COLON expression RIGHTPAR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 47 resolved as shift
